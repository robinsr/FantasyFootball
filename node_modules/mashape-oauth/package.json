{
  "name": "mashape-oauth",
  "version": "0.1.5",
  "description": "Library for handling OAuth (1.0a, Echo, XAuth, and 2.0) Requests and Responses",
  "main": "index.js",
  "directories": {
    "test": "tests"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.8.2"
  },
  "scripts": {
    "test": "mocha"
  },
  "repository": "",
  "keywords": [
    "authentication",
    "oauth",
    "http",
    "request",
    "response",
    "hmac",
    "sha1",
    "plaintext",
    "rsa",
    "1.0a",
    "2.0",
    "echo",
    "xauth",
    "2-legged",
    "3-legged",
    "two-legged",
    "three-legged"
  ],
  "author": {
    "name": "Nijiko Yonskai"
  },
  "license": "MIT",
  "readme": "# Mashape OAuth\n\nOAuth Modules for Node.js - Supporting RSA, HMAC, PLAINTEXT, 2-Legged, 3-Legged, 1.0a, Echo, XAuth, and 2.0\n\n# Installation\n\n```\nnpm install mashape-oauth\n```\n\n# Features\n\n- Handles binary responses\n- Handles gzipped responses\n- Supports having an empty oauth_token for 1.0a\n- Supports Plaintext, HMAC-SHA1, and RSA encryption for 1.0a\n- Object based parameter system and supports chaining\n- Code has been refactored to be more performant in loops, whiles, and callback structures.\n- Intuitive method naming, small footprint, and tested against test suites as well as hundreds of APIs.\n\n# Usage\n\nRequire the library and the one you wish to use.\n\n1. [OAuth](#using-oauth-1x-xauth-echo)\n  1. [getOAuthRequestToken](#getoauthrequesttoken---creating-request-token-call)\n  2. [getOAuthAccessToken](#getoauthaccesstoken---creating-oauth-access-token-call)\n  2. [getXAuthAccessToken](#getxauthaccesstoken---creating-xauth-access-token-call)\n  3. [Request Methods](#request-methods)\n2. [OAuth2](#using-oauth2)\n\n***\n\n### Using OAuth (1.x, XAuth, Echo):\n\n```javascript\nvar OAuth = require('mashape-oauth').OAuth;\nvar oa = new OAuth({ /* … options … */ }, callback);\n```\n- `options` `Object` *OAuth request options*\n  - `echo` `Object` ___Optional___ *If it exists we treat the request as OAuth Echo request. See [Twitter](https://dev.twitter.com/docs/auth/oauth/oauth-echo)*\n      - `verifyCredentials` `String` *What is the credentials URI to delegate against?*\n  - `realm` `String` ___Optional___ *Access Authentication Framework Realm Value, Commonly used in Echo Requests, allowed in all however: [Section 3.5.1](http://tools.ietf.org/html/rfc5849#section-3.5.1)*\n  - `requestUrl` `String` *Request Token URL. [Section 6.1](http://oauth.net/core/1.0/#auth_step1)*\n  - `accessUrl` `String` *Access Token URL. [Section 6.2](http://oauth.net/core/1.0/#auth_step2)*\n  - `callback` `String` *URL the Service Provider will use to redirect User back to Consumer after obtaining User Authorization has been completed. [Section 6.2.1](http://oauth.net/core/1.0/#auth_step2)*\n  - `consumerKey` `String` *The Consumer Key*\n  - `consumerSecret` `String` *The Consumer Secret*\n  - `version` `String` ___Optional___ *By spec this is `1.0` by default. [Section 6.3.1](http://oauth.net/core/1.0/#auth_step3)*\n  - `signatureMethod` `String` *Type of signature to generate, must be one of:*\n      - `PLAINTEXT`\n      - `RSA-SHA1`\n      - `HMAC-SHA1`\n  - `nonceLength` `Number` ___Optional___ *Length of nonce string. Default `32`*\n  - `headers` `Object` ___Optional___ *Headers to be sent along with request, by default these are already set.*\n  - `clientOptions` `Object` ___Optional___ *Contains `requestTokenHttpMethod` and `accessTokenHttpMethod` value.*\n  - `parameterSeperator` `String` ___Optional___ *Seperator for OAuth header parameters. Default is `,`*\n\n#### getOAuthRequestToken() - Creating Request Token Call\n\n```javascript\noa.getOAuthRequestToken({ /* … parameters … */ }, callback);\n```\n\n- `parameters` `Object` ___Optional___ *Additional Headers you might want to pass along.*\n  - *If omitted, you can treat parameters argument as callback and pass along a function as a single parameter.*\n- `callback` `Function` *Anonymous Function to be invoked upon response or failure.*\n\n\n##### Example\n\n```javascript\noa.getOAuthRequestToken(function (error, oauth_token, oauth_token_secret, results) {\n  if (error)\n    return res.send('Error getting OAuth Request Token: ' + error, 500);\n  else\n    // Usually a redirect happens here to the /oauth/authorize stage\n    return res.send('Successfully Obtained Token & Secret: ' + oauth_token + ' & ' + oauth_token_secret, 200);\n});\n```\n\n#### getOAuthAccessToken() - Creating OAuth Access Token Call\n\n```javascript\noa.getOAuthAccessToken(options, callback);\n```\n\n- `options` `Object`\n  - `oauth_verifier` `String` *Verification code tied to the Request Token. [Section 2.3](http://tools.ietf.org/html/rfc5849#section-2.3)*\n  - `oauth_token` `String` *Request Token*\n  - `oauth_token_secret` `String` *Request Token Secret, used to help generation of signatures.*\n  - `parameters` `Object` ___Optional___ *Additional headers to be sent along with request.*\n  - `callback` `Function` ___Optional___ *Method to be invoked upon result, over-ridden by argument if set.*\n- `callback` `Function` *Anonymous Function to be invoked upon response or failure, setting this overrides previously set callback inside options object.*\n\n\n##### Example\n\n```javascript\noa.getOAuthAccessToken({\n  oauth_verifier: 'ssid39b',\n  oauth_token: 'request_key',\n  oauth_secret: 'request_secret'\n}, function (error, token, secret, result) {\n  if (error)\n    return res.send('Error getting XAuth Access Token: ' + error, 500);\n  else\n    // Usually you want to store the token and secret in a session and make your requests after this\n    return res.send('Successfully Obtained Token & Secret: ' + oauth_token + ' & ' + oauth_token_secret, 200);\n});\n```\n\n#### getXAuthAccessToken() - Creating XAuth Access Token Call\n\n```javascript\noa.getXAuthAccessToken(username, password, callback);\n```\n\n- `username` `String` XAuth Username credentials of User obtaining a token on behalf of\n- `password` `String` XAuth Password credentials of User obtaining a token on behalf of\n- `callback` `Function` Anonymous Function to be invoked upon response or failure.\n\n\n##### Example\n\n```javascript\noa.getXAuthAccessToken('nijikokun', 'abc123', function (error, oauth_token, oauth_token_secret, results) {\n  if (error)\n    return res.send('Error getting XAuth Access Token: ' + error, 500);\n  else\n    // Usually you want to store the token and secret in a session and make your requests after this\n    return res.send('Successfully Obtained Token & Secret: ' + oauth_token + ' & ' + oauth_token_secret, 200);\n});\n```\n\n#### Request Methods\n\n```javascript\noa.post(options, callback);\noa.get(options, callback);\noa.delete(options, callback);\noa.patch(options, callback);\noa.put(options, callback);\n\n// Alternatively, you can use the old node-oauth style: (Where method is one of five above.)\noa.method(url, oauth_token, oauth_token_secret, body, type, parameters, callback);\n```\n\n- `options` `Object` Contains Request Information\n  - `url` `String` URL to be requested upon\n  - `oauth_token` `String` *Optional;* Dependant upon request step, could be access, or request token.\n  - `oauth_token_secret` `String` *Optional;* Dependant upon request step\n  - `body` `String` *Optional;* Body information to be sent along with request.\n  - `type` `String` *Optional;* Content Request Type\n  - `parameters` `Object` *Optional;* Additional headers you wish to pass along with your request.\n  - `callback` `Function` *Optional;* Method to be invoked upon result, over-ridden by argument if set.\n- `callback` `Function` Method to be invoked upon result, over-rides options callback.\n\n***\n\n### Using OAuth2:\n\n```javascript\nvar OAuth2 = require('mashape-oauth').OAuth2;\nvar oa = new OAuth2({ /* … options … */ }, callback);\n```\n\n- `options` `Object` OAuth Request Options\n  - `clientId` `String` Client Identifier\n  - `clientSecret` `String` Client Secret\n  - `baseUrl` `String` Base url of OAuth request\n  - `authorizationUrl` `String` *Optional;* Authorization endpoint, default is `/oauth/authorize`\n  - `authorizationMethod` `String` *Optional;* Authorization Header Method, default is `Bearer`\n  - `accessTokenUrl` `String` *Optional;* Access Token Endpoint, default is `/oauth/access_token`\n  - `accessTokenName` `String` *Optional;* Access Token Parameter Name, default is `access_token`\n  - `headers` `Object` *Optional;* Custom headers we wish to pass along\n\n***\n",
  "readmeFilename": "README.md",
  "_id": "mashape-oauth@0.1.5",
  "dist": {
    "shasum": "b23441bc7dbc0f7840d4e80bc7357561d040e691"
  },
  "_from": "mashape-oauth@",
  "_resolved": "https://registry.npmjs.org/mashape-oauth/-/mashape-oauth-0.1.5.tgz"
}
